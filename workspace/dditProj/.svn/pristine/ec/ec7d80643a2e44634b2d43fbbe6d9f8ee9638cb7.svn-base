package kr.or.ddit;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.vo.PointVO;

// 스프링 프레임워크가 브라우저의 요청(request)을 받아들이는 컨트롤러라고 인지하여 자바빈(java bean)으로 등록해서 관리함.
@Controller
public class BookController {
	/*
	 	MVC pattern(mode12방식) : 웹 페이지와 java code를 분리
	 	1. Model : 데이터 처리 클래스(DAO, DTO), back end
	 		- Data Access Object(DAO) : 실제적인 비즈니스 로직을 처리
	 		- Data Transfer Object(DTO) : 데이터를 저장, 전달
	 		- VO(Value Object), bean(빈), TO(Table Object)
	 		
	 	2. Controller : 프로그램의 흐름을 제어(servlet class)
	 	3. View : 화면 처리(jsp), front end
	 */
	
	// 브라우저의 요청주소(URI)가 /create일 때 실행되는 자바 컨트롤러 메서드
	// RequestMapping 어노테이션 : 브라우저의 요청URI에 실행되는 자바 메서드 지정
	/* method 속성 : http 요청 메서드
	 *	1) GET 메서드 : 데이터를 변경하지 않는 경우
	 *	2) POST 메서드 : 데이터가 변경될 경우 
	 */
	@RequestMapping(value="/create", method=RequestMethod.GET)
	public ModelAndView create() {
		/* ModelAndView
		 *	- 컨트롤러가 반환할 데이터를 담당하는 모델(Model)
		 *	- 화면을 담당하는 뷰(View)의 경로 
		 */
		// Autowire 어노테이션을 사용할 수 없음
		ModelAndView mav = new ModelAndView();
		mav.setViewName("book/create");
		mav.addObject("message", "환영합니다");
		return mav;
	}
	
	@RequestMapping(value = "/create", method=RequestMethod.POST)
	public ModelAndView createSubmit(ModelAndView mav) {
		
		return mav;
	}
	
	/*
	 	<프로젝트 파일 구성>
	 	1. pom.xml
	 		- 메이븐 프로젝트 빌드 파일
	 		- C:\Users\PC-25\.m2\repository
	 		
	 	2. src/main/java
	 		- 자바 소스 경로
	 		
	 	3.src/main/resources
	 		- 리소스 파일 경로(mybatis의 xml이 들어감)
	 		
	 	4. WEB-INF/spring/root-context.xml
	 		- 스프링의 설정 파일
	 	
	 	5. WEB-INF/spring/appServlet/servlet-context.xml
	 		- 스프링 웹 설정 파일
	 	
	 	6. WEB-INF/views
	 		- 뷰 파일 경로(jsp)
	 */
	
	@RequestMapping(value="/gugu", method=RequestMethod.GET)
	public String gugu() {
		return "book/gugu";
	}
	
	@RequestMapping("/gugu_result") // value, method 생략
	public String gugu_result(@RequestParam(defaultValue="3") int dan, Model model) {	// Model 사용
		String result = "";
		for(int i=1; i<=9; i++) {
			result += dan + " X " + i + " = " + dan*i + "<br>";
		}
		
		model.addAttribute("result", result);
		model.addAttribute("dan", dan);
		
		return "book/gugu_result";
	}
	
	// 성적 계산
	@RequestMapping("/point")
	public String point() {
		return "book/point";
	}
	
	// 성적 계산 결과
	/*
	 	form 데이터의 전달 방법
	 	 1) RequestParam 어노테이션
	 	 2) ModelAttribute 어노테이션 : 모델 클래스로 한꺼번에 전달 
	 */
	@RequestMapping("/point_result")
	public String point_result(@ModelAttribute PointVO pointVO, Model model) {
		// total 필드에 총점 입력 
		pointVO.setTotal(pointVO.getKor() + pointVO.getEng() + pointVO.getMath());
		
		// average 필드에 평균 입력
		String average = String.format("%.2f", pointVO.getTotal() / 3.0);
		pointVO.setAverage(Double.parseDouble(average));
		
		double avg = pointVO.getTotal() / 3.0;
		pointVO.setAverage(avg);
		
		model.addAttribute("pointVO", pointVO);
		model.addAttribute("avg", avg);
		
		return "book/point_result";
	}
	
	@RequestMapping("/move")
	public String move() {
		//return "redirect:/gugu";
		return "redirect:/myPage?id=a001&name=kimchulsu&age=23";
	}
	
	@RequestMapping("/myPage")
	public String myPage(@RequestParam String id
						, @RequestParam String name
						, @RequestParam int age
						, Model model) {
		
		System.out.println("id : " + id);
		System.out.println("name : " + name);
		System.out.println("age : " + age);
		
		model.addAttribute("id", id);
		model.addAttribute("name", name);
		model.addAttribute("age", age);
		
		return "book/myPage";
	}
	
	
	
	
	
	
	
	
	
	
	
	
}
