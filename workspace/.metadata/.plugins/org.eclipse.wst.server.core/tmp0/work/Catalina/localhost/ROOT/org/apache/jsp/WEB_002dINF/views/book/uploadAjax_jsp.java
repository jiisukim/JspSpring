/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.68
 * Generated at: 2021-07-29 05:16:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.book;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/dditProj/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1627018532952L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Ajax형식 파일 업로드</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	img{\r\n");
      out.write("		width: 500px;\r\n");
      out.write("		height: 400px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"/resources/js/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	//특정 확장자를 제외한 파일들의 업로드를 제한. 첨부파일을 이용한 웹 공격을 막기 위함\r\n");
      out.write("	// exe, sh, zip 등의 업로드는 제한. 특정 크기 이상의 파일은 업로드 제한\r\n");
      out.write("	var regex = new RegExp(\"(.*?)\\.(exe|sh|zip|alz)$\")\r\n");
      out.write("	var maxSize = 5242880; //5MB\r\n");
      out.write("	//파일명과파일의 크기를 파라미터로 받음\r\n");
      out.write("	\r\n");
      out.write("	function checkExtension(fileName, fileSize) {\r\n");
      out.write("		//5MB를 초과하지 못하게함\r\n");
      out.write("		if(fileSize >= maxSize){\r\n");
      out.write("			alert(\"파일 사이즈 초과\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		//파일명의 정규식 테스트\r\n");
      out.write("		if(regex.test(fileName)){\r\n");
      out.write("			alert(\"해당종류의 파일은 업로드 할 수 없습니다.\")\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		return true;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	$(function() {\r\n");
      out.write("		//input\r\n");
      out.write("		function readURL(input) {\r\n");
      out.write("			//input 파라미터에 파일이 있다면...\r\n");
      out.write("			if(input.files && input.files[0]){\r\n");
      out.write("				//파일을 읽기 위한 FileReader 객체를 생성\r\n");
      out.write("				var reader = new FileReader();\r\n");
      out.write("				reader.onload = function(e){\r\n");
      out.write("					//파일 읽기 성공시 처리\r\n");
      out.write("					$(\"#blah\").attr(\"src\",e.target.result);\r\n");
      out.write("				}\r\n");
      out.write("				//File 내용을 읽어 dataURL 형식의 문자열로 저장\r\n");
      out.write("				reader.readAsDataURL(input.files[0]);\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		$(\"#imgInp\").change(function () {\r\n");
      out.write("			//선택한 이미지의 경로 표시\r\n");
      out.write("			console.log(this.value);\r\n");
      out.write("			//imgInp 즉 , 파일요소를 readURL 함수의 파라미터로 던짐\r\n");
      out.write("			readURL(this);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		$(\"#uploadBtn\").on(\"click\",function(e){\r\n");
      out.write("			//파일 업로드시 jQuery를 이용하는 경우 FormData객체를 사용함\r\n");
      out.write("			//FormData는 가상의 <form>태그와 같다\r\n");
      out.write("			//Ajax를 이용한 파일 업로드는 FormData에 File 파라미터(name,value)를 담아 전송\r\n");
      out.write("			//File파라미터(name(String), value(File객체))\r\n");
      out.write("			\r\n");
      out.write("			var formData = new FormData();\r\n");
      out.write("			\r\n");
      out.write("			//input 태그들 중에서 name 속성의 값이 upload파일인 요소를 찾는다\r\n");
      out.write("\r\n");
      out.write("			var inputFile = $(\"input[name='uploadFile']\");\r\n");
      out.write("			//.files : \r\n");
      out.write("			console.log(inputFile[0].files);\r\n");
      out.write("			var files = inputFile[0].files;\r\n");
      out.write("			//inputFile 객체에 들어있는 file들의 개수만큼 반복\r\n");
      out.write("			for(var i = 0; i<files.length; i++){\r\n");
      out.write("				//파일의 크기와확장자 테스트.(함수로 파일명과 파일 사이즈를 파라미터로 던짐)\r\n");
      out.write("				//!true => false\r\n");
      out.write("				if(!checkExtension(files[i].name,files[i].size)){\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				//가상의 form태그 하위로 File파라미터를 넣어줌\r\n");
      out.write("				formData.append(\"uploadFile\",files[i]);\r\n");
      out.write("			} // end for\r\n");
      out.write("			\r\n");
      out.write("			//첨부파일 데이터를 formData에 추가한 후 Ajax를 통해 formData 자체를 전송\r\n");
      out.write("			//processData와 contentType은 반드시 false로 지정해야만 전송이 됨.\r\n");
      out.write("			//컨트롤러에서는 MultipartFile 타입을 이용하여 첨부파일 데이터를 처리함\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : '/uploadAjaxAction',\r\n");
      out.write("				processData : false,\r\n");
      out.write("				contentType : false,\r\n");
      out.write("				data: formData,\r\n");
      out.write("				type : 'POST',\r\n");
      out.write("				success:function(result){\r\n");
      out.write("					for(var i =0 in result){\r\n");
      out.write("						console.log(result[i]);\r\n");
      out.write("// 						$(\"#fileView\").append(\"<img src='/resources/images/\"+result[i]+ \"'/>\")\r\n");
      out.write("					}\r\n");
      out.write("					alert(\"Upload성공\");\r\n");
      out.write("				}\r\n");
      out.write("			});// end ajax\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form>\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("<h1>Ajax를 이용하여 업로드</h1>\r\n");
      out.write("<div id=\"fileView\">\r\n");
      out.write("	<img src=\"/resources/images/logo.png\" alt=\"이미지 미리보기\" id=\"blah\">\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"uploadDiv\">\r\n");
      out.write("	<input type=\"file\" id=\"imgInp\" name=\"uploadFile\" multiple=\"multiple\"> <!-- multiple: 이미지 여러개 -->\r\n");
      out.write("</div>\r\n");
      out.write("<button type=\"button\" id=\"uploadBtn\">upload</button>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
